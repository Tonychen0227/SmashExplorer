@model ExploreModel

<script>
    var isShowing = false;
    function foo() {
        const elements = document.getElementsByClassName("emojiSpan");
        for (const e of elements) {
            e.style.display = isShowing ? 'none' : 'inline';
        }

        isShowing = !isShowing;
    }
</script>
<div class="jumbotron">
    <h1>Explore - @Model.VanityLink.Name</h1>
    <h3 style="display:inline-block"><a href="https://www.start.gg/@Model.Event.Slug" target="_blank">@Model.Event.Name
            </a> @@ @Model.Event.TournamentName</h3><a style="display:inline-block;margin-left:10px;margin-bottom:5px" class="btn btn-info" href="https://www.start.gg/@Model.Event.Slug" target="_blank">
    View on start.gg</a>
    <div class="row" style="margin-top:10px">
    @Html.ActionLink("Check Upsets", null, "Upsets", new { id = Model.Event.Id }, new { @class = "btn btn-default" })
    @Html.ActionLink("Seed Visualizer", null, "SeedVisualizer", new { id = Model.Event.Id }, new { @class = "btn btn-default" })
    @Html.ActionLink("Copy to new Explore", null, "SelectEntrants", new { id = Model.VanityLink.Id }, new { @class = "btn btn-default" })
    </div>
</div>
@{
    var currentCount = 0;
    var sortedKeys = Model.DictKeys.OrderBy(x => x.Standing).ThenBy(x => x.Seeding).ToList();
    <button class="btn btn-toolbar" type="button" onclick="foo()">Toggle Emoji</button>
    for (var i = 0; i < sortedKeys.Count(); i+=2)
    {
    <div class="row">
        @for (var k = i; k < Math.Min(sortedKeys.Count(), i + 2); k++)
        {
            var entrant = sortedKeys[k];
            IEnumerable<Set> sets = Model.EntrantsSets[entrant].OrderByDescending(x => x.CompletedAt).ThenByDescending(x => x.CreatedAt).ToList();
            var pastSets = sets.Where(x => !string.IsNullOrEmpty(x.WinnerId) && x.WinnerId != "None");
            var incompleteSets = sets.Where(x => (string.IsNullOrEmpty(x.WinnerId) || x.WinnerId == "None"));
            var pendingSets = incompleteSets.Where(x => !pastSets.Any(y => (y.Round > 0 == x.Round > 0 && Math.Abs(y.Round ?? 0) >= Math.Abs(x.Round ?? 0)) && y.PhaseOrder == x.PhaseOrder && y.CompletedAt > x.CreatedAt)
                && !sets.Any(y => y.Round == x.Round && y.PhaseOrder == x.PhaseOrder && (string.IsNullOrEmpty(y.WinnerId) || y.WinnerId == "None") 
                && ((!y.Id.StartsWith("preview") && x.Id.StartsWith("preview")) || y.CreatedAt > x.CreatedAt)));
            <div class="col-md-6">
                <div class="panel" style="border: 1px solid gray; margin: 4px;">
                    <div class="panel-body">
                        <p style="border-bottom: 1px solid black; padding-bottom: 5px">
                            <a href="https://www.start.gg/@Model.Event.Slug/entrant/@entrant.Id" target="_blank"><strong>@entrant.Name</strong></a>
                            @{
                                List<int?> characters = new List<int?>();
                                foreach (var set in pastSets)
                                {
                                    if (set.Games != null)
                                    {
                                        var selections = set.Games.Where(x => x.Selections != null).SelectMany(x => x.Selections.Where(s => s.Entrant.Id == entrant.Id && s.SelectionType == "CHARACTER").Select(s => s.SelectionValue)).Distinct();
                                        characters.AddRange(selections);
                                    }
                                }

                                foreach (var character in characters.Distinct())
                                {
                                    if (character != null)
                                    {
                                        <img src="~/Content/Characters/@(character).jpg" style="height:20px;width:20px" />
                                    }
                                }
                            }
                            - <strong>@SmashExplorerDatabase.Instance.GetStringOrdinal(entrant.Standing ?? null)</strong>
                            out of @Model.Event.NumEntrants (@SmashExplorerDatabase.Instance.GetStringOrdinal(entrant.Seeding) Seed)
                        </p>
                        @{
                            foreach (var pendingSet in pendingSets)
                            {
                                var targetOpponent = pendingSet.Entrants.Where(x => x.Id != entrant.Id).SingleOrDefault();
                                var phaseIdentifier = $"{pendingSet.PhaseName}{(String.IsNullOrEmpty(pendingSet.PhaseIdentifier) || pendingSet.PhaseIdentifier == "1" ? "" : $" {pendingSet.PhaseIdentifier}")}";
                                string opponentName;
                                if (!string.IsNullOrEmpty(targetOpponent.Name))
                                {
                                    opponentName = $"{targetOpponent.Name} ({@SmashExplorerDatabase.Instance.GetStringOrdinal(targetOpponent.InitialSeedNum)} seed)";
                                }
                                else
                                {
                                    opponentName = $"{targetOpponent.PrereqType} {targetOpponent.PrereqId}";
                                    var prereqSet = Model.AllSets.Where(x => x.Id == targetOpponent.PrereqId).FirstOrDefault();
                                    if (prereqSet != null)
                                    {
                                        opponentName = string.Join(" / ", prereqSet.Entrants.Select(x => $"{x.Name} ({@SmashExplorerDatabase.Instance.GetStringOrdinal(x.InitialSeedNum)} seed)"));
                                    }
                                }
                                if (pendingSet.Id.StartsWith("preview"))
                                {
                                    var latestPendingSet = sets.Where(x => x.Id.StartsWith("preview")).OrderByDescending(x => x.CreatedAt).First();
                                    if (pendingSet.Id != latestPendingSet.Id)
                                    {
                                        continue;
                                    }
                                    if (pendingSet.PhaseId != null && pendingSet.Id.Split('_').Length >= 2)
                                    {
                                        <h5>
                                            <strong>Upcoming Set (@phaseIdentifier):</strong>
                                            <a href="https://www.start.gg/@Model.Event.Slug/brackets/@pendingSet.PhaseId/@pendingSet.Id.Split('_')[1]" target="_blank">vs @opponentName</a>
                                        </h5>
                                    }
                                    else
                                    {
                                        <h5><strong>Upcoming Set (@phaseIdentifier):</strong> vs @opponentName</h5>
                                    }
                                }
                                else
                                {
                                    <h5>
                                        <strong>Upcoming Set (@phaseIdentifier): </strong><a href="https://www.start.gg/@Model.Event.Slug/set/@pendingSet.Id" target="_blank">vs @opponentName</a>
                                        @if (pendingSet.Stream != null && pendingSet.Stream.StreamSource == "TWITCH")
                                        {
                                            <a href="https://www.twitch.tv/@pendingSet.Stream.StreamName" target="_blank"><img src="~/Content/twitch.png" alt="Twitch" style="height:20px;width:20px" /></a>
                                        }
                                    </h5>
                                }

                            }
                            if (pastSets.Any())
                            {
                                <h5><strong>Past Sets</strong></h5>
                                string storedIdentifier = null;
                                foreach (var set in pastSets)
                                {
                                    var playerSelections = set.Games?.Where(x => x.Selections != null).SelectMany(x => x.Selections.Where(s => s.Entrant.Id == entrant.Id && s.SelectionType == "CHARACTER").Select(s => s.SelectionValue)).Distinct();

                                    var selections = set.Games?.Where(x => x.Selections != null).SelectMany(x => x.Selections.Where(s => s.Entrant.Id != entrant.Id && s.SelectionType == "CHARACTER").Select(s => s.SelectionValue)).Distinct();

                                    var phaseIdentifier = $"{set.PhaseName}{(String.IsNullOrEmpty(set.PhaseIdentifier) || set.PhaseIdentifier == "1" ? "" : $" {set.PhaseIdentifier}")}";

                                    if (phaseIdentifier != storedIdentifier)
                                    {
                                        <strong><i>@phaseIdentifier</i></strong><br />
                                        storedIdentifier = phaseIdentifier;
                                    }
                                    var opponent = set.Entrants.Where(x => x.Id != entrant.Id).SingleOrDefault();
                                    string detailedScore;
                                    if (opponent != null && set.DetailedScore != null && set.DisplayScore != "DQ")
                                    {
                                        if (set.WinnerId == entrant.Id)
                                        {
                                            detailedScore = $"{set.DetailedScore[set.WinnerId]} - {set.DetailedScore[opponent.Id]}";
                                        }
                                        else
                                        {
                                            detailedScore = $"{set.DetailedScore[entrant.Id]} - {set.DetailedScore[opponent.Id]}";
                                        }
                                    }
                                    else
                                    {
                                        detailedScore = "DQ";
                                    }
                                    string url = "";
                                    if (!string.IsNullOrEmpty(set.PhaseId) && !string.IsNullOrEmpty(set.PhaseGroupId))
                                    {
                                        url = $"https://www.start.gg/{Model.Event.Slug}/brackets/{set.PhaseId}/{set.PhaseGroupId}";
                                    }
                                    else
                                    {
                                        url = $"https://www.start.gg/{Model.Event.Slug}/set/{set.Id}";
                                    }
                                    <span>
                                        @if (playerSelections != null)
                                        {
                                        foreach (var selection in playerSelections.Distinct())
                                        {
                                            if (selection != null)
                                            {
                                                    <img style="height:20px;width:20px;" src="~/Content/Characters/@(selection).jpg" />
                                                }
                                        }
                                    }
                                        <a href="@url" target="_blank">
                                            @if (set.WinnerId == entrant.Id)
                                            {
                                                @:W @detailedScore
                                            }
                                            else
                                            {
                                                @:L @detailedScore
                                            } vs @if (set.Entrants.Count == 1)
                                            {
                                                @:Bye
                                            }
                                            else
                                            {
                                                @opponent.Name @:(@SmashExplorerDatabase.Instance.GetStringOrdinal(opponent.InitialSeedNum) Seed)
                                            }
                                        </a>
                                        @if (selections != null)
                                        {
                                            foreach (var selection in selections.Distinct())
                                            {
                                                if (selection != null)
                                                {
                                                    <img style="height:20px;width:20px;" src="~/Content/Characters/@(selection).jpg" />
                                                }
                                            }
                                        }

                                        <span class="emojiSpan" style="display:none">
                                            @if (set.BracketType == "DOUBLE_ELIMINATION" && set.Round > 0)
                                            {
                                                if (set.WinnerId != entrant.Id)
                                                {
                                                    @:&#128315;
                                                }
                                                else
                                                {
                                                    @:&#128994;
                                                }
                                            }
                                            else if ((set.BracketType == "DOUBLE_ELIMINATION" && set.Round < 0) || set.BracketType == "SINGLE_ELIMINATION")
                                            {
                                                if (set.WinnerId != entrant.Id)
                                                {
                                                    @:&#128128;
                                                }
                                                else
                                                {
                                                    @:	&#128075;
                                                } @SmashExplorerDatabase.Instance.GetStringOrdinal(set.LPlacement)
                                            }
                                        </span>
                                    </span><br />
                                }
                            }
                        }
                    </div>
                    <div class="panel-footer">
                        @foreach (var info in entrant.AdditionalInfo)
                        {
                            if (info == null)
                            {
                                continue;
                            }

                            foreach (var url in info.Urls.OrderByDescending(x => x.Url))
                            {
                                if (url?.Url != null)
                                {
                                    Uri uri = new Uri(url.Url);
                                    <a href="@url.Url" target="_blank">
                                        @if (url.Url.Contains("twitter.com"))
                                        {
                                            <img src="~/Content/twitter.png" alt="Twitter" style="width:30px;height:30px;">
                                        }
                                        else if (url.Url.Contains("twitch.tv"))
                                        {
                                            <img src="~/Content/twitch.png" alt="Twitch" style="width:30px;height:30px;">
                                        }
                                    </a>
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    }
}
