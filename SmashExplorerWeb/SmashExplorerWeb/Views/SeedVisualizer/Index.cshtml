@model VisualizeSeedsModel

<!DOCTYPE HTML>
<html>
<head>
<script>
    var config = null;
    var chart = null;

    window.onload = function () {
        Chart.register(ChartDataLabels);

        var dataPoints = []

        @foreach (var dataPoint in Model.DataPoints)
        {
            @:dataPoints.push({ x: @dataPoint.NormalizedPlacement.ToString(), y: @dataPoint.SPR, title: "@dataPoint.PlacementOrdinal (@dataPoint.SPR SPR)", label: "@dataPoint.Name (@dataPoint.Seed)" });
        }

        var lowestSPR = null;
        var highestX = null;
        for (var i = 0; i < dataPoints.length; i++) {
            var dataPoint = dataPoints[i];
            if (lowestSPR == null) {
                lowestSPR = dataPoint.y;
            } else if (lowestSPR > dataPoint.y) {
                lowestSPR = dataPoint.y;
            }

            if (highestX == null) {
                highestX = dataPoint.x;
            } else if (highestX < dataPoint.x) {
                highestX = dataPoint.x;
            }
        }

        const data = {
            datasets: [{
                label: 'SPR',
                data: dataPoints,
                backgroundColor: 'rgb(255, 39, 104)',
                pointRadius: 5
            }]
        };

        config = {
            type: 'scatter',
            data: data,
            options: {
                plugins: {
                    legend: {
                        display: false
                    },
                    datalabels: {
                        color: '#3f80ff',
                        display: 'auto',
                        align: function (context) {
                            var dataPoint = dataPoints[context.dataIndex];
                            if (dataPoint.x == highestX) {
                                return 'left';
                            }
                            if (dataPoint.y == lowestSPR) {
                                return 'top';
                            }
                            return 'bottom';
                        },
                        offset: 3
                    },
                    tooltip: {
                        callbacks: {
                            title: function (tooltipItem, data) {
                                return tooltipItem[0].raw.title;
                            },
                            label: function (tooltipItem, data) {
                                return tooltipItem.raw.label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom',
                        title: {
                            display: true,
                            text: 'Placement',
                            font: {
                                size: 20,
                                weight: 'bold',
                                lineHeight: 1.2,
                            },
                            padding: { top: 20, left: 0, right: 0, bottom: 0 }
                        },
                        ticks: {
                            callback: function (val, index) {
                                // Hide the label of every 2nd dataset
                                if (val == -1) {
                                    return 0;
                                }

                                var array = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129]

                                return array[val]
                            },
                            stepSize: 1
                        },
                        min: -1
                    },
                    y: {
                        type: 'linear',
                        position: 'bottom',
                        title: {
                            display: true,
                            text: 'SPR',
                            font: {
                                size: 20,
                                weight: 'bold',
                                lineHeight: 1.2,
                            },
                            padding: { top: 20, left: 0, right: 0 }
                        },
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        };

        chart = new Chart(
            document.getElementById('myChart'),
            config
        );
    }

    function toggleLabel() {
        if (chart.options.plugins.datalabels.display == 'auto') {
            chart.options.plugins.datalabels.display = false;
        } else {
            chart.options.plugins.datalabels.display = 'auto';
        }

        chart.update();
    }
</script>
</head>
<body>
    <div class="jumbotron">
        <h1>Seed Visualizer</h1>
        <h3 style="display:inline-block"> @Model.Event.Name @@ @Model.Event.TournamentName<sup>Top 128 only</sup> </h3>
        <a style="display:inline-block;margin-left:10px;margin-bottom:5px" class="btn btn-info" href="https://www.start.gg/@Model.Event.Slug"
           target="_blank">View on start.gg </a>
        <p>SPR = <a href="https://www.pgstats.com/articles/introducing-spr-and-uf" target="_blank">Seed Performance Rating</a></p>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.0.0/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    @if (string.IsNullOrWhiteSpace(Model.Message))
    {
        <canvas id="myChart" class="col-sm-12" style="height:@(200 + (Model.DataPoints.Max(x => x.SPR) - @Model.DataPoints.Min(x => x.SPR))*40)px"></canvas>
        <a style="display:inline-block;margin-left:10px;margin-bottom:5px" class="btn btn-default" onclick="toggleLabel()">Show/Hide labels</a>
        <div class="col-sm-12">
            <h3>Standings and SPR (Top 128 only)</h3>
            <div style="overflow-y: scroll; height: 500px; margin-top: 30px">
                <table class="table table-hover">
                    <tr>
                        <th>Entrant</th>
                        <th>Placement</th>
                        <th>Seed</th>
                        <th>SPR</th>
                    </tr>
                    @foreach (var dataPoint in Model.DataPoints)
                    {
                        <tr>
                            <td>@dataPoint.Name</td>
                            <td>@dataPoint.Placement</td>
                            <td>@dataPoint.Seed</td>
                            <td>@dataPoint.SPR</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    }
    else
    {
        <h1>@Model.Message</h1>
    }
</body>
</html>