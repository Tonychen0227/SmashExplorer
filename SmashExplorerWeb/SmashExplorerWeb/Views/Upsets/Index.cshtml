@model UpsetsModel

<script>
    function copyToClipboard() {
        var stringArgs = []

        stringArgs.push("#Upsets - [@Model.Event.Name @@ @Model.Event.TournamentName](https://www.start.gg/@Model.Event.Slug)")
        stringArgs.push("Upset factor 2 minimum.");
        stringArgs.push("");
        stringArgs.push("Automatically generated by https://smashexplorer.gg/Upsets/@Model.Event.Id at @DateTime.UtcNow.ToString("G") UTC");

        stringArgs.push("## Winners - Upsets")
        @foreach (var phase in Model.WinnersUpsets.Keys)
        {
            var setsList = Model.WinnersUpsets[phase].Where(x => x.UpsetFactor > 1).ToList();
            if (setsList.Count > 0) {
                @:stringArgs.push("");
                var firstSet = setsList[0];
                @:stringArgs.push("[**@phase**](https://www.start.gg/@Model.Event.Slug/brackets/@firstSet.Set.PhaseId/@firstSet.Set.PhaseGroupId)");
                @:stringArgs.push("");
                var lastUpsetFactor = -1;
                foreach (var upset in setsList.OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                {
                    if (upset.UpsetFactor != lastUpsetFactor) {
                        @:stringArgs.push("**Upset Factor @upset.UpsetFactor**");
                        @:stringArgs.push("");
                        lastUpsetFactor = upset.UpsetFactor;
                    }
                    var newString = upset.NewDisplayScore;
                    @:stringArgs.push("@newString");
                    @:stringArgs.push("");
                }
            }
        }

        stringArgs.push("## Losers - Upsets")
        @foreach (var phase in Model.LosersUpsets.Keys)
        {
            var setsList = Model.LosersUpsets[phase].Where(x => x.UpsetFactor > 1).ToList();
            if (setsList.Count > 0) {
                @:stringArgs.push("");
                var firstSet = setsList[0];
                @:stringArgs.push("[**@phase**](https://www.start.gg/@Model.Event.Slug/brackets/@firstSet.Set.PhaseId/@firstSet.Set.PhaseGroupId)");
                @:stringArgs.push("");
                var lastUpsetFactor = -1;
                foreach (var upset in setsList.OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                {
                    if (upset.UpsetFactor != lastUpsetFactor) {
                        @:stringArgs.push("**Upset Factor @upset.UpsetFactor**");
                        @:stringArgs.push("");
                        lastUpsetFactor = upset.UpsetFactor;
                    }
                    var newString = upset.NewDisplayScore;
                    var placementString = $"(out @ {SmashExplorerDatabase.Instance.GetStringOrdinal(upset.Set.LPlacement ?? -1)} in {phase})";
                    @:stringArgs.push("@newString **@placementString**");
                    @:stringArgs.push("");
                }
            }
        }

        stringArgs.push("#Notable");

        stringArgs.push("## Winners - Notable")
        @foreach (var phase in Model.WinnersNotable.Keys)
        {
            var setsList = Model.WinnersNotable[phase].Where(x => x.UpsetFactor > 1).ToList();
            if (setsList.Count > 0) {
                @:stringArgs.push("");
                var firstSet = setsList[0];
                @:stringArgs.push("[**@phase**](https://www.start.gg/@Model.Event.Slug/brackets/@firstSet.Set.PhaseId/@firstSet.Set.PhaseGroupId)");
                @:stringArgs.push("");
                var lastUpsetFactor = -1;
                foreach (var upset in setsList.OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                {
                    if (upset.UpsetFactor != lastUpsetFactor) {
                        @:stringArgs.push("**Upset Factor @upset.UpsetFactor**");
                        @:stringArgs.push("");
                        lastUpsetFactor = upset.UpsetFactor;
                    }
                    var newString = upset.NewDisplayScore;
                    @:stringArgs.push("@newString");
                    @:stringArgs.push("");
                }
            }
        }

        stringArgs.push("## Losers - Notable")
        @foreach (var phase in Model.LosersNotable.Keys)
        {
            var setsList = Model.LosersNotable[phase].Where(x => x.UpsetFactor > 1).ToList();
            if (setsList.Count > 0) {
                @:stringArgs.push("");
                var firstSet = setsList[0];
                @:stringArgs.push("[**@phase**](https://www.start.gg/@Model.Event.Slug/brackets/@firstSet.Set.PhaseId/@firstSet.Set.PhaseGroupId)");
                @:stringArgs.push("");
                var lastUpsetFactor = -1;
                foreach (var upset in setsList.OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                {
                    if (upset.UpsetFactor != lastUpsetFactor) {
                        @:stringArgs.push("**Upset Factor @upset.UpsetFactor**");
                        @:stringArgs.push("");
                        lastUpsetFactor = upset.UpsetFactor;
                    }
                    var newString = upset.NewDisplayScore;
                    var placementString = $"(out @ {SmashExplorerDatabase.Instance.GetStringOrdinal(upset.Set.LPlacement ?? -1)} in {phase})";
                    @:stringArgs.push("@newString **@placementString**");
                    @:stringArgs.push("");
                }
            }
        }

        var copiedString = stringArgs.join('\n');

        var el = document.createElement('textarea');
        // Set value (string to be copied)
        el.value = copiedString;
        // Set non-editable to avoid focus and move outside of view
        el.setAttribute('readonly', '');
        el.style = { position: 'absolute', left: '-9999px' };
        document.body.appendChild(el);
        // Select text inside element
        el.select();
        // Copy text to clipboard
        document.execCommand('copy');
        // Remove temporary element
        document.body.removeChild(el);
    }
</script>
<div class="jumbotron">
    <h1>Upsets</h1>
    <h3 style="display:inline-block">
        @Model.Event.Name @@ @Model.Event.TournamentName
    </h3>
    <a style="display:inline-block;margin-left:10px;margin-bottom:5px" class="btn btn-info" href="https://www.start.gg/@Model.Event.Slug" target="_blank">
        View on start.gg
    </a>
    @if (string.IsNullOrWhiteSpace(Model.Message))
    {
        using (Html.BeginForm(null, null, FormMethod.Post))
        {
            @Html.DropDownListFor(x => x.MinimumUpsetFactor, new SelectList(Enumerable.Range(1, Model.MaximumUpsetFactor)), "Minimum Upset Factor",
            new { @class = "form-control col-md-2", @style = "height: 60px;" })
            @Html.ListBoxFor(m => m.SelectedPhases, Model.AvailablePhases, new
            {
                DropDownStyle = "DropdownList",
            @style = "overflow-y: scroll; height: 60px; margin-left:10px",
                @class = "listbox col-md-3"
            })
            <button type="submit" style="margin-left:10px;margin-top:10px;display:inline-block" class="btn btn-primary">Submit</button>
        }
    }
</div>
<button type="button" onclick="copyToClipboard()" style="margin-left:10px;margin-top:10px;display:inline-block" class="btn btn-default">Copy markdown to clipboard</button>
<div class="row">
    @if (string.IsNullOrWhiteSpace(Model.Message))
    {
        <div class="row">
            <div class="col-md-6">
                <h3>Winners - Upsets</h3>
                <div style="overflow-y: scroll; height: @Math.Min(75 + Model.WinnersUpsets.Values.Sum(x => x.Count)*75, 500)px ">
                    @foreach (var phase in Model.WinnersUpsets.Keys)
                    {
                        <h4>@phase</h4>
                        <table class="table table-hover">
                            <tr>
                                <th>Score</th>
                                <th>Upset Factor</th>
                            </tr>
                            @foreach (var upset in Model.WinnersUpsets[phase].OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                            {
                                <tr>
                                    <td><a href="https://www.start.gg/@Model.Event.Slug/set/@upset.Set.Id" target="_blank" class="col-md-9">@upset.NewDisplayScore</a></td>
                                    <td class="col-md-3">@upset.UpsetFactor</td>
                                </tr>
                            }
                        </table>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <h3>Losers - Upsets</h3>
                <div style="overflow-y: scroll; height: @Math.Min(75 + Model.LosersUpsets.Values.Sum(x => x.Count)*75, 500)px ">
                    @foreach (var phase in Model.LosersUpsets.Keys)
                    {
                        <h4>@phase</h4>
                        <table class="table table-hover">
                            <tr>
                                <th>Score</th>
                                <th>Upset Factor</th>
                            </tr>
                            @foreach (var upset in Model.LosersUpsets[phase].OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                            {
                                var newDisplayScore = upset.NewDisplayScore + $" (out @ {SmashExplorerDatabase.Instance.GetStringOrdinal(upset.Set.LPlacement ?? -1)})";
                                <tr>
                                    <td><a href="https://www.start.gg/@Model.Event.Slug/set/@upset.Set.Id" target="_blank" class="col-md-9">@newDisplayScore</a></td>
                                    <td class="col-md-3">@upset.UpsetFactor</td>
                                </tr>
                            }
                        </table>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <h3>Winners - Notable<sup>Last game, potential upset</sup></h3>
                <div style="overflow-y: scroll; height: @Math.Min(75 + Model.WinnersNotable.Values.Sum(x => x.Count)*75, 500)px ">
                    @foreach (var phase in Model.WinnersNotable.Keys)
                    {
                        <h4>@phase</h4>
                        <table class="table table-hover">
                            <tr>
                                <th>Score</th>
                                <th>Upset Factor</th>
                            </tr>
                            @foreach (var upset in Model.WinnersNotable[phase].OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                            {
                                <tr>
                                    <td><a href="https://www.start.gg/@Model.Event.Slug/set/@upset.Set.Id" target="_blank" class="col-md-9">@upset.NewDisplayScore</a></td>
                                    <td class="col-md-3">@upset.UpsetFactor</td>
                                </tr>
                            }
                        </table>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <h3>Losers - Notable<sup>Last game, potential upset</sup></h3>
                <div style="overflow-y: scroll; height: @Math.Min(75 + Model.LosersNotable.Values.Sum(x => x.Count)*75, 500)px ">
                    @foreach (var phase in Model.LosersNotable.Keys)
                    {
                        <h4>@phase</h4>
                        <table class="table table-hover">
                            <tr>
                                <th>Score</th>
                                <th>Upset Factor</th>
                            </tr>
                            @foreach (var upset in Model.LosersNotable[phase].OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                            {
                                var newDisplayScore = upset.NewDisplayScore + $" (out @ {SmashExplorerDatabase.Instance.GetStringOrdinal(upset.Set.LPlacement ?? -1)})";
                                <tr>
                                    <td><a href="https://www.start.gg/@Model.Event.Slug/set/@upset.Set.Id" target="_blank" class="col-md-9">@newDisplayScore</a></td>
                                    <td class="col-md-3">@upset.UpsetFactor</td>
                                </tr>
                            }
                        </table>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <h1>No upsets reported so far. Come back later!</h1>
    }
</div>