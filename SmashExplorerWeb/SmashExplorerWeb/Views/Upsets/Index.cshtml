@model UpsetsModel

<script>
    function copyToClipboard() {
        var stringArgs = []

        stringArgs.push("# Upset Thread - [@Model.Event.Name @@ @Model.Event.TournamentName](https://www.start.gg/@Model.Event.Slug)")
        stringArgs.push("Upset factor 2 minimum.");
        stringArgs.push("");
        stringArgs.push("Automatically generated by https://smashexplorer.gg/Upsets/@Model.Event.Id at @DateTime.UtcNow.ToString("G") UTC");

        @{
            var argsList = new Dictionary<string, Dictionary<string, List<Upset>>>()
            {
                { "## Winners - Upsets", Model.WinnersUpsets },
                { "## Losers - Upsets", Model.LosersUpsets },
                { "## Winners - Notable", Model.WinnersNotable },
                { "## Losers - Notable", Model.LosersNotable }
            };

            var keys = argsList.Keys.ToList();

            for (var i = 0; i < keys.Count; i++)
            {
                var key = keys[i];
                var upsets = argsList[key];
                var setAdded = false;
                @:stringArgs.push("@key");
                foreach (var phase in upsets.Keys)
                {
                    var setsList = upsets[phase].Where(x => x.UpsetFactor > 1).ToList();
                    if (setsList.Count > 0) {
                        setAdded = true;
                        @:stringArgs.push("");
                        var firstSet = setsList[0];
                        @:stringArgs.push("[**@phase**](https://www.start.gg/@Model.Event.Slug/brackets/@firstSet.Set.PhaseId/@firstSet.Set.PhaseGroupId)");
                        @:stringArgs.push("");

                        var lastUpsetFactor = -1;
                        foreach (var upset in setsList.OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                        {
                            if (upset.UpsetFactor != lastUpsetFactor) {
                                @:stringArgs.push("**Upset Factor @upset.UpsetFactor**");
                                @:stringArgs.push("");
                                lastUpsetFactor = upset.UpsetFactor;
                            }
                            var newString = upset.NewDisplayScore;
                            if (i % 2 == 1)
                            {
                                var placementString = $"(out @ {SmashExplorerDatabase.Instance.GetStringOrdinal(upset.Set.LPlacement ?? -1)} in {phase})";
                                newString = $"{newString} **{placementString}**";
                            }
                            @:stringArgs.push("@newString ([set link](https://www.start.gg/@Model.Event.Slug/set/@upset.Set.Id))");
                            @:stringArgs.push("");
                        }
                    }
                }

                if (!setAdded)
                {
                    @:stringArgs.push("No sets here!");
                }
            }
        }

        var copiedString = stringArgs.join('\n');

        var el = document.createElement('textarea');
        // Set value (string to be copied)
        el.value = copiedString;
        // Set non-editable to avoid focus and move outside of view
        el.setAttribute('readonly', '');
        el.style = { position: 'absolute', left: '-9999px' };
        document.body.appendChild(el);
        // Select text inside element
        el.select();
        // Copy text to clipboard
        document.execCommand('copy');
        // Remove temporary element
        document.body.removeChild(el);
    }

    function foo(key, phaseName, eventName, eventId, setId, displayScore, upsetFactor) {
        var element = document.getElementById(setId);

        var args = [];

        var prefix = "UPSET FACTOR ";
        if (key.includes("Notable")) {
            prefix = "NOTABLE FACTOR ";
        }

        var stage = "LOSERS";
        if (key.includes("Winners")) {
            stage = "WINNERS";
        }

        args.push(prefix + upsetFactor + " at " + eventName + " (" + phaseName + " " + stage + ")");
        args.push(displayScore);
        args.push("For more upsets, check https://smashexplorer.gg/Upsets/" + eventId);
        args.push("Presented by @@SmashExplorer");

        element.href = "https://twitter.com/intent/tweet?text=" + encodeURIComponent(args.join("\n\n"));
        element.target = "_blank";
    }
</script>
<div class="jumbotron">
    <h1>Upsets</h1>
    <h3 style="display:inline-block">
        @Model.Event.Name @@ @Model.Event.TournamentName
    </h3>
    <a style="display:inline-block;margin-left:10px;margin-bottom:5px" class="btn btn-info" href="https://www.start.gg/@Model.Event.Slug" target="_blank">
        View on start.gg
    </a>
    @if (string.IsNullOrWhiteSpace(Model.Message))
    {
        using (Html.BeginForm(null, null, FormMethod.Post))
        {
            @Html.DropDownListFor(x => x.MinimumUpsetFactor, new SelectList(Enumerable.Range(1, Model.MaximumUpsetFactor)), "Minimum Upset Factor",
            new { @class = "form-control col-md-2", @style = "height: 60px;" })
            @Html.ListBoxFor(m => m.SelectedPhases, Model.AvailablePhases, new
            {
                DropDownStyle = "DropdownList",
            @style = "overflow-y: scroll; height: 60px; margin-left:10px",
                @class = "listbox col-md-3"
            })
            <button type="submit" style="margin-left:10px;margin-top:10px;display:inline-block" class="btn btn-primary">Submit</button>
        }
    }
</div>
<button type="button" onclick="copyToClipboard()" style="margin-left:10px;margin-top:10px;display:inline-block" class="btn btn-default">Copy markdown to clipboard</button>
<div class="row">
    @if (string.IsNullOrWhiteSpace(Model.Message))
    {
        var array = new Dictionary<string, Dictionary<string, List<Upset>>>() { { "Winners - Upsets", Model.WinnersUpsets }, { "Losers - Upsets", Model.LosersUpsets },
                  { "Winners - Notable" , Model.WinnersNotable }, { "Losers - Notable", Model.LosersNotable } };

        var keysList = array.Keys.ToList();
        for (var start = 0; start < keysList.Count; start+=2) {
            if (start % 2 == 0) {
                @:<div class="row">
            }for (var i = start; i <= start + 1; i++) {
                var upsets = array[keysList[i]];
                <div class="col-md-6">
                    <h3>@keysList[i]@if (start == 2){<sup>Last game, potential upset</sup>}</h3>
                    <div style="overflow-y: scroll; height: @Math.Min(75 + upsets.Values.Sum(x => x.Count)*75, 500)px ">
                        @foreach (var phase in upsets.Keys)
                        {
                            <h4>@phase</h4>
                            <table class="table table-hover">
                                <tr>
                                    <th>Score</th>
                                    <th>Upset Factor</th>
                                </tr>
                                @foreach (var upset in upsets[phase].OrderByDescending(x => x.UpsetFactor).ThenBy(x => x.Set.LPlacement))
                                {
                                    <tr>
                                        <td><a href="https://www.start.gg/@Model.Event.Slug/set/@upset.Set.Id" target="_blank" class="col-md-9">
                                            @{
                                                if (upset.Set.Games != null)
                                                {
                                                    var winnerSelections = upset.Set.Games?.Where(x => x.Selections != null)
                                                        .SelectMany(x => x.Selections.Where(k => k.Entrant.Id == upset.Set.WinnerId)
                                                            .Where(k => k.SelectionType == "CHARACTER").Select(k => k.SelectionValue)).Distinct();

                                                    foreach (var selection in winnerSelections)
                                                    {
                                                        if (selection != null)
                                                        {
                                                        <img style="width:20px;height:20px" src="~/Content/Characters/@(selection).jpg"/>
                                                        }
                                                    }
                                                }
                                            }
                                            @upset.NewDisplayScore
                                            @{
                                                if (upset.Set.Games != null)
                                                {
                                                    var loserSelections = upset.Set.Games?.Where(x => x.Selections != null)
                                                        .SelectMany(x => x.Selections.Where(k => k.Entrant.Id != upset.Set.WinnerId)
                                                            .Where(k => k.SelectionType == "CHARACTER").Select(k => k.SelectionValue)).Distinct();

                                                    foreach (var selection in loserSelections)
                                                    {
                                                        if (selection != null)
                                                        {
                                                        <img style="width:20px;height:20px" src="~/Content/Characters/@(selection).jpg"/>
                                                        }
                                                    }
                                                }
                                            }
                                            @if (i % 2 == 1) { 
                                                @($" (out @ {SmashExplorerDatabase.Instance.GetStringOrdinal(upset.Set.LPlacement ?? -1)})")
                                            }
                                            </a></td>
                                        <td class="col-md-3">@upset.UpsetFactor     
                                        <a id="@upset.Set.Id" style="margin-left:10px" class="twitter-share-button" onclick="foo('@keysList[i]', '@phase', '@Model.Event.Name - @Model.Event.TournamentName', '@Model.Event.Id', '@upset.Set.Id', '@upset.NewDisplayScore@($" (out @ {SmashExplorerDatabase.Instance.GetStringOrdinal(upset.Set.LPlacement ?? -1)} in {phase})")', @upset.UpsetFactor)"><img src="~/Content/twitter.png" style="height:15px;width:15px"/>Share</a></td>
                                    </tr>
                                }
                            </table>
                        }
                    </div>
                </div>
                        }
            if (start % 2 == 0) { 
                @:</div>
            }
        }
    }
    else
    {
        <h1>No upsets reported so far. Come back later!</h1>
    }
</div>